package main

import (
	"fmt"
	"log"

	"client/pkg/protoGo"
	"io/ioutil"

	"golang.org/x/net/context"
	"google.golang.org/grpc"
	"gopkg.in/yaml.v2"
)

type AutoGenerated struct {
	Version  string      `yaml:"version"`
	Metadata interface{} `yaml:"metadata"`
	Users    []struct {
		Name  string `yaml:"Name"`
		Valid bool   `yaml:"valid"`
	} `yaml:"users"`
}

func main() {
	var (
		conn *grpc.ClientConn
		u    AutoGenerated
	)
	conn, err := grpc.Dial(":7777", grpc.WithInsecure())
	if err != nil {
		log.Fatalf("did not connect: %s", err)
	}
	defer conn.Close()
	c := protoGo.NewGreeterClient(conn)

	yamlFile, err := ioutil.ReadFile("users.yaml")
	if err != nil {
		log.Printf("yamlFile.Get err   #%v ", err)
	}
	err = yaml.Unmarshal(yamlFile, &u)
	if err != nil {
		log.Fatalf("Unmarshal: %v", err)
	}
	fmt.Println("Yaml: ", u)
	for _, user := range u.Users {
		if user.Valid {
			_, err = c.SayHello(context.Background(), &protoGo.HelloRequest{Name: user.Name})
			if err != nil {
				log.Fatalf("Error when calling SayHello: %s", err)
			}
		} else {
			log.Println("Not allowed User:", user.Name)
		}

	}

}
